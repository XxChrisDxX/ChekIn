import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author letzo
 */
public class AdminProfile extends javax.swing.JFrame {

	private String name;
	private String uHost, uEmail, uPassword;
	private static String event = "";

	public AdminProfile(String name) {
		this.name = name;
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		adminHeader = new javax.swing.JLabel();
		adminTabPanel = new javax.swing.JTabbedPane();
		adminUserPanel = new javax.swing.JPanel();
		adminUserSearch = new javax.swing.JLabel();
		adminUserSearchField = new javax.swing.JTextField();
		adminUserNameList = new javax.swing.JScrollPane();
		jList2 = new javax.swing.JList<>();
		adminUserPermissions = new javax.swing.JButton();
		adminUserData = new javax.swing.JButton();
		adminUserInvite = new javax.swing.JButton();
		adminUserNotify = new javax.swing.JButton();
		adminEventPanel = new javax.swing.JPanel();
		adminEventHeader = new javax.swing.JLabel();
		adminEventList = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList<>();
		adminEventEdit = new javax.swing.JButton();
		adminEventEnd = new javax.swing.JButton();
		adminEventCreate = new javax.swing.JButton();
		adminEventStart = new javax.swing.JButton();
		adminEventDelete = new javax.swing.JButton();
		adminStatPanel = new javax.swing.JPanel();
		adminStatHeader = new javax.swing.JLabel();
		adminStatEventMenu = new javax.swing.JComboBox<>();
		adminStatEvent = new javax.swing.JLabel();
		adminStatAgeMenu = new javax.swing.JComboBox<>();
		adminStatData = new javax.swing.JLabel();
		adminStatReport = new javax.swing.JLabel();
		adminStatGenerate = new javax.swing.JButton();
		adminStatPopularEvent = new javax.swing.JButton();
		adminStatPopularDay = new javax.swing.JButton();
		adminStatAttendance = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		adminUserNameList.setViewportView(jList2);

		adminUserPermissions.setText("Edit Permissions");

		adminUserData.setText("View User Data");

		adminHeader.setText("Event Management");

		adminUserSearch.setText("Search Members:");

		adminUserPermissions.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminUserPermissionsActionPerformed(evt);
					}
				});

		adminUserData.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminUserDataActionPerformed(evt);
			}
		});

		adminUserNotify.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminUserNotifyActionPerformed(evt);
			}
		});

		adminUserInvite.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminUserInviteActionPerformed(evt);
			}
		});

		adminUserInvite.setText("Send Event Invite");

		adminUserNotify.setText("Send Notification");

		javax.swing.GroupLayout adminUserPanelLayout =
				new javax.swing.GroupLayout(adminUserPanel);
		adminUserPanel.setLayout(adminUserPanelLayout);
		adminUserPanelLayout.setHorizontalGroup(adminUserPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminUserPanelLayout.createSequentialGroup()
						.addContainerGap().addGroup(adminUserPanelLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING,
										false).addGroup(adminUserPanelLayout
												.createSequentialGroup()
												.addComponent(adminUserSearch)
												.addPreferredGap(
														javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addComponent(
														adminUserSearchField))
								.addComponent(adminUserNameList,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										241,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(adminUserPanelLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING,
								false).addComponent(adminUserPermissions,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE).addComponent(
												adminUserData,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE).addComponent(
														adminUserInvite,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
								.addComponent(adminUserNotify,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)).addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		adminUserPanelLayout.setVerticalGroup(adminUserPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminUserPanelLayout.createSequentialGroup()
						.addContainerGap().addGroup(adminUserPanelLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(adminUserSearch).addComponent(
										adminUserSearchField,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE))
						.addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(adminUserPanelLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(adminUserNameList,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										215, Short.MAX_VALUE).addGroup(
												adminUserPanelLayout
														.createSequentialGroup()
														.addComponent(
																adminUserPermissions)
														.addGap(18, 18, 18)
														.addComponent(
																adminUserData)
														.addGap(18, 18, 18)
														.addComponent(
																adminUserInvite)
														.addGap(18, 18, 18)
														.addComponent(
																adminUserNotify)
														.addGap(0, 0,
																Short.MAX_VALUE)))
						.addContainerGap()));

		adminHandle userList = new adminHandle();

		adminUserSearchField.addKeyListener(userList);

		adminTabPanel.addTab("Users", adminUserPanel);

		adminEventHeader.setText("Event List");

		jList1.addListSelectionListener(
				new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						jList1ValueChanged(evt);
					}
				});
		// sets up list for event selection in combobox
		try {
			Database eventlist = new Database();
			String[] strings = new String[eventlist.readEventList().size()];
			for (int i = 0; i < strings.length; i++) {
				strings[i] = eventlist.readEventList().get(i);
			}
			jList1.setModel(new javax.swing.AbstractListModel<String>() {
				public int getSize() {
					return strings.length;
				}

				public String getElementAt(int i) {
					return strings[i];
				}
			});
		} catch (IOException e) {

		}

		adminEventList.setViewportView(jList1);

		adminEventEdit.setText("Edit");

		adminEventEnd.setText("End Event");

		adminEventCreate.setText("Create New Event");

		adminEventStart.setText("Start Event");

		adminEventDelete.setText("Delete Event");

		javax.swing.GroupLayout adminEventPanelLayout =
				new javax.swing.GroupLayout(adminEventPanel);
		adminEventPanel.setLayout(adminEventPanelLayout);
		adminEventPanelLayout.setHorizontalGroup(adminEventPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminEventPanelLayout.createSequentialGroup()
						.addContainerGap().addGroup(adminEventPanelLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(adminEventPanelLayout
										.createSequentialGroup().addComponent(
												adminEventList,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												236, Short.MAX_VALUE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(adminEventPanelLayout
												.createParallelGroup(
														javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(adminEventDelete,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														135,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(adminEventEdit,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														135,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(adminEventStart,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														135,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(adminEventEnd,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														135,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														adminEventCreate)))
								.addGroup(adminEventPanelLayout
										.createSequentialGroup().addComponent(
												adminEventHeader).addGap(0, 0,
														Short.MAX_VALUE)))));
		adminEventPanelLayout.setVerticalGroup(adminEventPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminEventPanelLayout.createSequentialGroup()
						.addContainerGap().addComponent(adminEventHeader)
						.addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(adminEventPanelLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(adminEventPanelLayout
										.createSequentialGroup().addComponent(
												adminEventCreate).addGap(18, 18,
														18).addComponent(
																adminEventDelete)
										.addGap(18, 18, 18).addComponent(
												adminEventEdit).addPreferredGap(
														javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
										.addComponent(adminEventStart).addGap(
												18, 18, 18).addComponent(
														adminEventEnd))
								.addComponent(adminEventList,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										210, Short.MAX_VALUE))
						.addContainerGap()));

		adminTabPanel.addTab("Events", adminEventPanel);

		adminStatHeader.setText("Generate Event Statistics");

		try {
			Database eventlist = new Database();
			Set<String> names = new HashSet<String>(eventlist.readEventAll());// creates
																			  // set
																			  // that
																			  // eliminates
																			  // duplicates
			String[] strings = new String[names.size()];
			int i = 0;
			for (String s : names) {
				strings[i] = s;
				i++;
			}
			adminStatEventMenu.setModel(new javax.swing.DefaultComboBoxModel<>(
					strings));
		} catch (IOException e) {

		}

		adminStatEventMenu.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminStatEventMenuActionPerformed(evt);
					}
				});

		adminEventStart.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminEventStartActionPerformed(evt);
			}
		});

		adminEventEnd.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminEventEndActionPerformed(evt);
			}
		});

		adminEventCreate.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminEventCreateActionPerformed(evt);
			}
		});

		adminEventDelete.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminEventDeleteActionPerformed(evt);
			}
		});

		adminEventEdit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				adminEventEditActionPerformed(evt);
			}
		});

		adminStatEvent.setText("Event Type");

		adminStatAgeMenu.setModel(new javax.swing.DefaultComboBoxModel<>(
				new String[] { "Age", "Attendance", "Day of Week" }));
		adminStatAgeMenu.setToolTipText("");

		adminStatData.setText("Data Type");

		adminStatReport.setText("Event Reports");

		adminStatGenerate.setText("Generate!");
		adminStatGenerate.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminStatGenerateActionPerformed(evt);
					}
				});

		adminStatPopularEvent.setText("Popular Event");

		adminStatPopularDay.setText("Popular DayofWeek");

		adminStatAttendance.setText("Attendance of All");
		adminStatAttendance.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminStatAttendanceActionPerformed(evt);
					}
				});

		adminStatPopularDay.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminStatPopularDayActionPerformed(evt);
					}
				});

		adminStatPopularEvent.addActionListener(
				new java.awt.event.ActionListener() {
					public void actionPerformed(
							java.awt.event.ActionEvent evt) {
						adminStatPopularEventActionPerformed(evt);
					}
				});
		javax.swing.GroupLayout adminStatPanelLayout =
				new javax.swing.GroupLayout(adminStatPanel);
		adminStatPanel.setLayout(adminStatPanelLayout);
		adminStatPanelLayout.setHorizontalGroup(adminStatPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminStatPanelLayout.createSequentialGroup()
						.addContainerGap().addGroup(adminStatPanelLayout
								.createParallelGroup(
										javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(
										javax.swing.GroupLayout.Alignment.TRAILING,
										adminStatPanelLayout
												.createSequentialGroup().addGap(
														0, 0, Short.MAX_VALUE)
												.addGroup(adminStatPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																adminStatPanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				adminStatHeader)
																		.addGap(117,
																				117,
																				117))
														.addComponent(
																adminStatGenerate,
																javax.swing.GroupLayout.Alignment.TRAILING)))
								.addGroup(adminStatPanelLayout
										.createSequentialGroup().addGroup(
												adminStatPanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																adminStatData)
														.addComponent(
																adminStatEvent)
														.addComponent(
																adminStatEventMenu,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																110,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																adminStatAgeMenu,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																110,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												106, Short.MAX_VALUE).addGroup(
														adminStatPanelLayout
																.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																.addGroup(
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		adminStatPanelLayout
																				.createParallelGroup(
																						javax.swing.GroupLayout.Alignment.LEADING,
																						false)
																				.addComponent(
																						adminStatReport)
																				.addComponent(
																						adminStatPopularDay,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						156,
																						Short.MAX_VALUE)
																				.addComponent(
																						adminStatPopularEvent,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						javax.swing.GroupLayout.DEFAULT_SIZE,
																						Short.MAX_VALUE))
																.addComponent(
																		adminStatAttendance,
																		javax.swing.GroupLayout.Alignment.TRAILING,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		156,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()))));
		adminStatPanelLayout.setVerticalGroup(adminStatPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(adminStatPanelLayout.createSequentialGroup().addGroup(
						adminStatPanelLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(adminStatPanelLayout
										.createSequentialGroup()
										.addContainerGap().addComponent(
												adminStatHeader)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(adminStatReport,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												20,
												javax.swing.GroupLayout.PREFERRED_SIZE))
								.addGroup(adminStatPanelLayout
										.createSequentialGroup().addGap(43, 43,
												43).addComponent(adminStatEvent)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addGroup(adminStatPanelLayout
												.createParallelGroup(
														javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														adminStatEventMenu,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														adminStatPopularEvent))))
						.addGroup(adminStatPanelLayout.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(adminStatPanelLayout
										.createSequentialGroup().addGap(18, 18,
												18).addComponent(
														adminStatPopularDay)
										.addGap(18, 18, 18).addComponent(
												adminStatAttendance)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												62, Short.MAX_VALUE)
										.addComponent(adminStatGenerate))
								.addGroup(adminStatPanelLayout
										.createSequentialGroup().addGap(58, 58,
												58).addComponent(adminStatData)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(adminStatAgeMenu,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												23,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, Short.MAX_VALUE)))));

		adminTabPanel.addTab("Statistics", adminStatPanel);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING, layout
								.createSequentialGroup().addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE).addComponent(
												adminHeader).addGap(141, 141,
														141)).addGroup(layout
																.createSequentialGroup()
																.addComponent(
																		adminTabPanel,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		400,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(0, 0,
																		Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
						.createSequentialGroup().addComponent(adminHeader)
						.addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(adminTabPanel)));

		pack();
	}

	private void adminStatEventMenuActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_adminStatEventMenuActionPerformed

	}

	private void adminUserInviteActionPerformed(
			java.awt.event.ActionEvent evt) {

		// HI IM WHERE EMAIL CODE IS USED TO SEND A MESSAGE TO A USER. LIKE
		// HERRO SIRE YOUVE BEEN INVITED TO EVENT!@!!@!@!
		// name = jList2.getSelectedValue(); will be youre friend when seeing
		// what name is selected.
		// try{Database hello = new Database(); hello.readEmail(name); }
		// catch(IOException......){} will also be your friend

		try {
			Database valid = new Database();
	        
			uEmail = valid.readEmail(name);
			String line = uEmail;
			int length = line.length();
			int beg = 0;
			
			for(int i = 0; i<length;i++){
				if(line.charAt(i)=='@'){
					beg = i;
				}
				if(beg != 0){
					uHost = "smtp." + line.substring(beg+1, length);
					break;
				}
			}
		} catch (IOException e) {

		}
		uPassword = JOptionPane.showInputDialog("Enter password for email address.");				
		try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
         
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	File properties = new File("smtp.properties");
            	properties.delete();
                new SwingEmailSender(uHost, uEmail, uPassword).setVisible(true);
            }
        });
		//new SwingEmailSender(uHost, uEmail, uPassword).setVisible(true);
		
		
        setVisible(false);

	}

	private void adminUserNotifyActionPerformed(
			java.awt.event.ActionEvent evt) {

		// HI IM WHERE EMAIL CODE IS USED TO SEND A MESSAGE TO A USER. LIKE YOU
		// SIR HAVENT SHOWED UP TO ANY EVENT...GTFO
		// name = jList2.getSelectedValue(); will be youre friend when seeing
		// what name is selected.
		// try{Database hello = new Database(); hello.readEmail(name); }
		// catch(IOException......){} will also be your friend

		try {
			Database valid = new Database();
	        
			uEmail = valid.readEmail(name);
			String line = uEmail;
			int length = line.length();
			int beg = 0;
			
			for(int i = 0; i<length;i++){
				if(line.charAt(i)=='@'){
					beg = i;
				}
				if(beg != 0){
					uHost = "smtp." + line.substring(beg+1, length);
					break;
				}
			}
		} catch (IOException e) {

		}
		uPassword = JOptionPane.showInputDialog("Enter password for email address.");				
		try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
         
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
            	File properties = new File("smtp.properties");
            	properties.delete();
                new SwingEmailSender(uHost, uEmail, uPassword).setVisible(true);
            }
        });
		//new SwingEmailSender(uHost, uEmail, uPassword).setVisible(true);
		
		
        setVisible(false);

	}

	// when the generate button is clicked it pulls the two selected values from
	// data type and event type
	private void adminStatGenerateActionPerformed(
			java.awt.event.ActionEvent evt) {

		try {
			Database eventstats = new Database();
			ArrayList<String> age = new ArrayList<String>(eventstats
					.readEventStats().size() / 3);
			ArrayList<String> name = new ArrayList<String>(eventstats
					.readEventStats().size() / 3);
			ArrayList<String> date = new ArrayList<String>(eventstats
					.readEventStats().size() / 3);
			String selection = adminStatEventMenu.getItemAt(adminStatEventMenu
					.getSelectedIndex());
			String dataselection = adminStatAgeMenu.getItemAt(adminStatAgeMenu
					.getSelectedIndex());

			for (int j = 0; j < eventstats.readEventStats().size(); j++) {
				if (j % 3 == 0)
					name.add(eventstats.readEventStats().get(j));// list of all
																 // names of
																 // events in
																 // database
				if (j % 3 == 1)
					date.add(eventstats.readEventStats().get(j));// list of all
																 // dates of
																 // events in
																 // database
				if (j % 3 == 2)
					age.add(eventstats.readEventStats().get(j));// list of all
																// ages of
																// events in
																// database
			}
			ArrayList<String> tempname = new ArrayList<String>();
			ArrayList<String> tempdate = new ArrayList<String>();
			ArrayList<String> tempage = new ArrayList<String>();

			for (int j = 0; j < name.size(); j++) {
				if (selection.equals(name.get(j))) {
					tempname.add(name.get(j));// list of all names of events
											  // that match the event type of
											  // selected value in pulldown
					tempdate.add(date.get(j));// list of dates that match the
											  // event type of selected value in
											  // event type
					tempage.add(age.get(j));// ^^ ditto
				}
			}
			// makes bar graph of the attendance of a event type selected on
			// various days of week
			if (dataselection.equals("Day of Week")) {
				// day of week popularity of attendance
				String[] dayarr = { "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY",
						"THURSDAY", "FRIDAY", "SATURDAY" }; // display for axes
				double[][] daydata = new double[2][7];// array that holds values
													  // for graph.
													  // [0][i]=attendance
													  // [1][i] = avg age of
													  // attendance
				DateTimeFormatter formatter = DateTimeFormatter.ofPattern(
						"yyyy/MM/dd");
				int count = 0;
				// if data type selected is day and event type is selected
				// <selection>
				for (String i : tempdate) {
					LocalDate eventDay = LocalDate.parse(i, formatter);
					if (eventDay.getDayOfWeek().name().equals(dayarr[0])) {
						daydata[0][0] += 1;// attendance increment
						daydata[1][0] += Double.parseDouble(tempage.get(count));

					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[1])) {
						daydata[0][1] += 1;
						daydata[1][1] += Double.parseDouble(tempage.get(count));
					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[2])) {
						daydata[0][2] += 1;
						daydata[1][2] += Double.parseDouble(tempage.get(count));
					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[3])) {
						daydata[0][3] += 1;
						daydata[1][3] += Double.parseDouble(tempage.get(count));
					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[4])) {
						daydata[0][4] += 1;
						daydata[1][4] += Double.parseDouble(tempage.get(count));
					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[5])) {
						daydata[0][5] += 1;
						daydata[1][5] += Double.parseDouble(tempage.get(count));
					} else if (eventDay.getDayOfWeek().name().equals(
							dayarr[6])) {
						daydata[0][6] += 1;
						daydata[1][6] += Double.parseDouble(tempage.get(count));
					}
					count++;
				}
				for (int i = 0; i < 7; i++) {
					daydata[1][i] = daydata[1][i] / daydata[0][i];// divides
																  // entire
																  // addition of
																  // age by
																  // attendees
																  // for avg age
																  // for that
																  // day
				}

				int maxattend = 0;
				for (int i = 0; i < 7; i++) {
					if (maxattend < daydata[0][i]) {
						maxattend = (int) daydata[0][i];
					}
				}
				DowBarGraph dowbargraph = new DowBarGraph(selection, maxattend,
						daydata, dayarr);
				JFrame frame = new JFrame("Day of Week BarGraph");
				frame.getContentPane().add(dowbargraph);
				frame.pack();
				frame.setLocationByPlatform(true);
				frame.setVisible(true);

			}

			// if event type selected and age selected then we do a line graph
			// showing distribution of ages for this event type
			// y axis = # of this type of age
			// x axis = age
			else if (dataselection.equals("Age")) {
				// age range
				// datatype + age = line graph <selection>
				Set<String> agelisting = new TreeSet<String>(tempage);
				double[] agedata = new double[agelisting.size()];// holds number
																 // of certain
																 // age
				String[] agename = agelisting.toArray(new String[0]);// display
																	 // for axes
																	 // of ages
																	 // database
																	 // in order
				int count = 0;
				for (String t : agelisting) {
					for (int i = 0; i < tempage.size(); i++) {
						if (tempage.get(i).equals(t)) {
							agedata[count] += 1;
						}
					}
					count++;
				}
				int agesize = agelisting.size();
				int maxage = 0;
				for (int i = 0; i < agesize; i++) {
					if (maxage < agedata[i]) {
						maxage = (int) agedata[i];
					}
				}
				LineGraph agegraph = new LineGraph(selection, agesize, maxage,
						agename, agedata);
				JFrame frame = new JFrame("Age LineGraph");
				frame.getContentPane().add(agegraph);
				frame.pack();
				frame.setLocationByPlatform(true);
				frame.setVisible(true);
			}

			// if event type selected and data is attendance then we make bar
			// graph
			// attendance on y axis
			// x axis is dates of this certain event already in order
			else if (dataselection.equals("Attendance")) {
				// attendance for an event type type+attendance <selection>
				// splits event type by date and attendance on that date
				Set<String> datelisting = new TreeSet<String>(tempdate);
				double[][] data = new double[2][datelisting.size()];// holds
																	// attendance
																	// in [0][i]
																	// and avg
																	// age in
																	// [1][i]
				String[] datename = datelisting.toArray(new String[0]);// display
																	   // of
																	   // dates
																	   // as
																	   // string
																	   // for x
																	   // axis
				int count = 0;
				for (String t : datelisting) {
					data[0][count] = Collections.frequency(tempdate, t);
					double avgage = 0;
					int index = 0;
					for (int k = 0; k < data[0][count]; k++) {
						int storage = tempdate.subList(index, tempdate.size())
								.indexOf(t);
						avgage += Double.parseDouble(tempage.get(storage + k));
						index = storage + 1;
					}
					data[1][count] = avgage / data[0][count];
					count++;
				}
				int maxattend = 0;
				int size = datelisting.size();
				for (int i = 0; i < datelisting.size(); i++) {
					if (maxattend < data[0][i])
						maxattend = (int) data[0][i];
				}
				AttndBarGraph attndbargraph = new AttndBarGraph(selection,
						maxattend, size, data, datename);
				JFrame frame = new JFrame("Attendance BarGraph");
				frame.getContentPane().add(attndbargraph);
				frame.pack();
				frame.setLocationByPlatform(true);
				frame.setVisible(true);
			}
		} catch (IOException e) {

		}
	}

	// clicked on attendance of all button w/ no selection necessary
	// shows attendance of each event type as a whole disregarding date and also
	// shows avg age respectively
	// should be a bar graph with x axis being event type stored in namearray
	// and attendance y axis stored in
	// namedata[0][i] with avg age in namedata[1][i]
	private void adminStatAttendanceActionPerformed(
			java.awt.event.ActionEvent evt) {

		try {
			Database eventpopular = new Database();
			ArrayList<String> age = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> name = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> date = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);

			for (int j = 0; j < eventpopular.readEventStats().size(); j++) {
				if (j % 3 == 0)
					name.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 1)
					date.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 2)
					age.add(eventpopular.readEventStats().get(j));
			}
			// attendance of each event on whole <button>
			int count = 0;
			Set<String> namelisting = new TreeSet<String>(name);// does bar
																// graph of
																// attendance to
																// everytype
																// event should
																// be a button
			double[][] namedata = new double[2][namelisting.size()];
			String[] namearray = namelisting.toArray(new String[0]);// display
																	// for axes
			for (String t : namelisting) {
				double avgage = 0;
				int index = 0;
				namedata[0][count] = Collections.frequency(name, t);
				for (int i = 0; i < namedata[0][count]; i++) {
					int storage = name.subList(index, name.size()).indexOf(t);
					avgage += Double.parseDouble(age.get(storage + i));
					index = storage + 1;
				}
				namedata[1][count] = avgage / namedata[0][count]; // age array
																  // for avg age
																  // in each
																  // event type
				count++;
			}
			int maxattend = 0;
			int size = namelisting.size();
			for (int i = 0; i < namelisting.size(); i++) {
				if (maxattend < namedata[0][i])
					maxattend = (int) namedata[0][i];
			}
			AttndBarGraph attndbargraph = new AttndBarGraph("All Events",
					maxattend, size, namedata, namearray);
			JFrame frame = new JFrame("Attendance BarGraph");
			frame.getContentPane().add(attndbargraph);
			frame.pack();
			frame.setLocationByPlatform(true);
			frame.setVisible(true);

		} catch (IOException e) {

		} catch (DateTimeParseException e) {
			JOptionPane.showMessageDialog(null,
					"The date and time data recorded "
					+ "is in the incorrect format. Please "
					+ "refer to database.dat and check "
					+ "recorded dates.",
					"Oops!",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	// shows attendance for each day of week including all event types no
	// selection necessary.
	// bar graph with day of week x axis held in dayarr
	// y axis is attendance held in daydata[0][i] and avg age held in blah blah
	// blah...getting redundant
	private void adminStatPopularDayActionPerformed(
			java.awt.event.ActionEvent evt) {
		try {
			Database eventpopular = new Database();
			ArrayList<String> age = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> name = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> date = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);

			for (int j = 0; j < eventpopular.readEventStats().size(); j++) {
				if (j % 3 == 0)
					name.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 1)
					date.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 2)
					age.add(eventpopular.readEventStats().get(j));
			}
			// day of week popularity of attendance
			String[] dayarr = { "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY",
					"THURSDAY", "FRIDAY", "SATURDAY" }; // display for axes
			double[][] daydata = new double[2][7];
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern(
					"yyyy/MM/dd");
			int count = 0;
			// if data type selected is day and event type is selected
			// <selection>
			// else does string i : date for all types of events most popular
			// dayofweek <button>
			for (String i : date) {
				LocalDate eventDay = LocalDate.parse(i, formatter);
				if (eventDay.getDayOfWeek().name().equals(dayarr[0])) {
					daydata[0][0] += 1;// attendance increment
					daydata[1][0] += Double.parseDouble(age.get(count));// age
																		// addition
																		// for
																		// all
																		// who
																		// attended
																		// this
																		// day
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[1])) {
					daydata[0][1] += 1;
					daydata[1][1] += Double.parseDouble(age.get(count));
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[2])) {
					daydata[0][2] += 1;
					daydata[1][2] += Double.parseDouble(age.get(count));
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[3])) {
					daydata[0][3] += 1;
					daydata[1][3] += Double.parseDouble(age.get(count));
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[4])) {
					daydata[0][4] += 1;
					daydata[1][4] += Double.parseDouble(age.get(count));
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[5])) {
					daydata[0][5] += 1;
					daydata[1][5] += Double.parseDouble(age.get(count));
				} else if (eventDay.getDayOfWeek().name().equals(dayarr[6])) {
					daydata[0][6] += 1;
					daydata[1][6] += Double.parseDouble(age.get(count));
				}
				count++;
			}
			for (int i = 0; i < 7; i++) {
				daydata[1][i] = daydata[1][i] / daydata[0][i];// divides entire
															  // addition of age
															  // by attendees
															  // for avg age for
															  // that day
			}

			int maxattend = 0;
			for (int i = 0; i < 7; i++) {
				if (maxattend < daydata[0][i]) {
					maxattend = (int) daydata[0][i];
				}
			}
			DowBarGraph alldowbargraph = new DowBarGraph("All Events",
					maxattend, daydata, dayarr);
			JFrame frame = new JFrame("Day of Week BarGraph");
			frame.getContentPane().add(alldowbargraph);
			frame.pack();
			frame.setLocationByPlatform(true);
			frame.setVisible(true);
		} catch (IOException e) {

		} catch (DateTimeParseException e) {
			JOptionPane.showMessageDialog(null,
					"The date and time data recorded "
					+ "is in the incorrect format. Please "
					+ "refer to database.dat and check "
					+ "recorded dates.",
					"Oops!",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	// shows the most popular event to date with no selection necessary. simply
	// prints the event type and its date of occurance.
	// the displaying of this is up to whoever. click it to see whats stored in
	// what....
	private void adminStatPopularEventActionPerformed(
			java.awt.event.ActionEvent evt) {

		try {
			Database eventpopular = new Database();
			ArrayList<String> age = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> name = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);
			ArrayList<String> date = new ArrayList<String>(eventpopular
					.readEventStats().size() / 3);

			for (int j = 0; j < eventpopular.readEventStats().size(); j++) {
				if (j % 3 == 0)
					name.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 1)
					date.add(eventpopular.readEventStats().get(j));
				if (j % 3 == 2)
					age.add(eventpopular.readEventStats().get(j));
			}
			// most popular event to date <button>
			ArrayList<String> eventSpecific = new ArrayList<String>();
			for (int i = 0; i < name.size(); i++) {
				eventSpecific.add(name.get(i) + " " + date.get(i));
			}
			Set<String> eventSpecificList = new TreeSet<String>(eventSpecific);
			String[] specificname = eventSpecificList.toArray(new String[0]);// display
																			 // for
																			 // axes
			int frequency = 0;
			int count = 0;
			int freqindex = 0;
			for (String i : eventSpecificList) {
				if (Collections.frequency(eventSpecific, i) > frequency) {
					frequency = Collections.frequency(eventSpecific, i);
					freqindex = count;
				}
				count++;
			}
			JOptionPane.showMessageDialog(null, "Most Popular Event:\n"
					+ specificname[freqindex] + "\nRecorded attendance: "
					+ frequency);

		} catch (IOException e) {

		}
	}

	private void adminEventDeleteActionPerformed(
			java.awt.event.ActionEvent evt) {

		try {
			Database deleteevent = new Database();
			deleteevent.deleteEventList(jList1.getSelectedValue());
			String[] strings = new String[deleteevent.readEventList().size()];
			for (int i = 0; i < strings.length; i++) {
				strings[i] = deleteevent.readEventList().get(i);
			}
			jList1.setModel(new javax.swing.AbstractListModel<String>() {
				public int getSize() {
					return strings.length;
				}

				public String getElementAt(int i) {
					return strings[i];
				}
			});
		} catch (IOException e) {

		} catch (NullPointerException e) {
			JOptionPane.showMessageDialog(null,
					"No event has been selected.",
					"Oops!",
					JOptionPane.ERROR_MESSAGE);
		}

	}

	private void adminEventEditActionPerformed(java.awt.event.ActionEvent evt) {
		int index = jList1.getSelectedIndex();
		String eventType;
		String eventDate;
		eventType = JOptionPane.showInputDialog("Enter Event Type.");
		eventDate = JOptionPane.showInputDialog("Enter Event Date.\n"
				+ "YYYY/MM/DD");
		try {
			Database event = new Database();
			event.deleteEventList(jList1.getSelectedValue());
			event.writeEventList(eventType + " " + eventDate);
			String[] strings = new String[event.readEventList().size()];
			for (int i = 0; i < strings.length; i++) {
				strings[i] = event.readEventList().get(i);
			}
			jList1.setModel(new javax.swing.AbstractListModel<String>() {
				public int getSize() {
					return strings.length;
				}

				public String getElementAt(int i) {
					return strings[i];
				}
			});
		} catch (IOException e) {

		} catch (NullPointerException e) {
			
		}

	}

	private void adminEventCreateActionPerformed(
			java.awt.event.ActionEvent evt) {
		String eventType;
		String eventDate;
		eventType = JOptionPane.showInputDialog("Enter Event Type.");
		eventDate = JOptionPane.showInputDialog("Enter Event Date.\n"
				+ "YYYY/MM/DD");
		try {
			Database newevent = new Database();
			newevent.writeEventList(eventType + " " + eventDate);
			String[] strings = new String[newevent.readEventList().size()];
			for (int i = 0; i < strings.length; i++) {
				strings[i] = newevent.readEventList().get(i);
			}
			jList1.setModel(new javax.swing.AbstractListModel<String>() {
				public int getSize() {
					return strings.length;
				}

				public String getElementAt(int i) {
					return strings[i];
				}
			});
		} catch (IOException e) {

		}
	}

	private void adminEventStartActionPerformed(
			java.awt.event.ActionEvent evt) {
		event = jList1.getSelectedValue();
		setVisible(false);
		new CheckinScreen().setVisible(true);
	}

	private void adminEventEndActionPerformed(java.awt.event.ActionEvent evt) {
		event = "";
		setVisible(false);
		new CheckinScreen().setVisible(true);
	}

	private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {

	}

	private void adminUserPermissionsActionPerformed(
			java.awt.event.ActionEvent evt) {
		name = jList2.getSelectedValue();
		try {
			Database permission = new Database();
			if (permission.readPermissions(name)) {
				JOptionPane.showMessageDialog(null,
						"Permissions set to basic.",
						"Success!",
						JOptionPane.INFORMATION_MESSAGE);
				permission.writePermissions(name, 0);
			} else {
				JOptionPane.showMessageDialog(null,
						"Permissions set to administrator.",
						"Success!",
						JOptionPane.INFORMATION_MESSAGE);
				permission.writePermissions(name, 1);
			}
		} catch (IOException e) {

		} catch (NullPointerException e) {
			JOptionPane.showMessageDialog(null,
					"No user has been selected.",
					"Oops!",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	private void adminUserDataActionPerformed(java.awt.event.ActionEvent evt) {
		name = jList2.getSelectedValue();
		try {
			Database info = new Database();
			String[] strings = new String[info.readEvent(name).size() + 6];
			strings[0] = name;
			strings[1] = "Email: " + info.readEmail(name);
			strings[2] = "DOB: " + info.readBirth(name);
			strings[3] = "Phone:" + info.readPhone(name);
			strings[4] = "Events Attended:";
			strings[5] = "";
			int index = 0;
			for (int i = 6; i < strings.length; i++) {
				strings[i] = info.readEvent(name).get(index);
				index++;
			}

			jList2.setModel(new javax.swing.AbstractListModel<String>() {
				public int getSize() {
					return strings.length;
				}

				public String getElementAt(int i) {
					return strings[i];
				}
			});
		} catch (IOException e) {

		} catch (NullPointerException e) {
			JOptionPane.showMessageDialog(null,
					"No user has been selected.",
					"Oops!",
					JOptionPane.ERROR_MESSAGE);
		}

	}

	private class adminHandle implements KeyListener {
		public void keyReleased(KeyEvent e) {
			Database searching = new Database();
			String search = "";
			search = adminUserSearchField.getText();
			try {
				String[] strings = new String[searching.findUser(search)
						.size()];
				for (int i = 0; i < strings.length; i++)
					strings[i] = searching.findUser(search).get(i);

				jList2.setModel(new javax.swing.AbstractListModel<String>() {
					public int getSize() {
						return strings.length;
					}

					public String getElementAt(int i) {
						return strings[i];
					}
				});
			} catch (IOException e1) {
				System.out.println("wheres the file bro");
			}
		}

		public void keyPressed(KeyEvent e) {
		}

		public void keyTyped(KeyEvent e) {

		}

	}

	public static String getEvent() {
		return event;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(AdminProfile.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(AdminProfile.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(AdminProfile.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(AdminProfile.class.getName())
					.log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new AdminProfile("").setVisible(true);
			}
		});
	}

	private javax.swing.JButton adminEventCreate;
	private javax.swing.JButton adminEventDelete;
	private javax.swing.JButton adminEventEdit;
	private javax.swing.JButton adminEventEnd;
	private javax.swing.JLabel adminEventHeader;
	private javax.swing.JScrollPane adminEventList;
	private javax.swing.JPanel adminEventPanel;
	private javax.swing.JButton adminEventStart;
	private javax.swing.JLabel adminHeader;
	private javax.swing.JComboBox<String> adminStatAgeMenu;
	private javax.swing.JButton adminStatAttendance;
	private javax.swing.JLabel adminStatData;
	private javax.swing.JLabel adminStatEvent;
	private javax.swing.JComboBox<String> adminStatEventMenu;
	private javax.swing.JButton adminStatGenerate;
	private javax.swing.JLabel adminStatHeader;
	private javax.swing.JPanel adminStatPanel;
	private javax.swing.JButton adminStatPopularDay;
	private javax.swing.JButton adminStatPopularEvent;
	private javax.swing.JLabel adminStatReport;
	private javax.swing.JTabbedPane adminTabPanel;
	private javax.swing.JButton adminUserData;
	private javax.swing.JScrollPane adminUserNameList;
	private javax.swing.JPanel adminUserPanel;
	private javax.swing.JButton adminUserPermissions;
	private javax.swing.JLabel adminUserSearch;
	private javax.swing.JTextField adminUserSearchField;
	private javax.swing.JButton adminUserNotify;
	private javax.swing.JButton adminUserInvite;
	private javax.swing.JList<String> jList1;
	private javax.swing.JList<String> jList2;

	// End of variables declaration//GEN-END:variables
}
